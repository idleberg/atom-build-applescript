{"version":3,"file":"provider.js","sources":["../src/config.js","../src/provider.js"],"sourcesContent":["import meta from '../package.json';\n\nexport const configSchema = {\n  manageDependencies: {\n    title: 'Manage Dependencies',\n    description: 'When enabled, third-party dependencies will be installed automatically',\n    type: 'boolean',\n    default: true,\n    order: 0\n  },\n  alwaysEligible: {\n    title: 'Always Eligible',\n    description: 'The build provider will be available in your project, even when not eligible',\n    type: 'boolean',\n    default: false,\n    order: 1\n  }\n};\n\nexport function getConfig(key) {\n  return atom.config.get(`${meta.name}.${key}`);\n}\n","import { configSchema, getConfig } from './config';\r\nimport { platform } from 'os';\r\n\r\nexport { configSchema as config };\r\n\r\nexport function provideBuilder() {\r\n  return class OsaProvider {\r\n    constructor(cwd) {\r\n      this.cwd = cwd;\r\n    }\r\n\r\n    getNiceName() {\r\n      return 'AppleScript';\r\n    }\r\n\r\n    isEligible() {\r\n      if (getConfig('alwaysEligible') === true) {\r\n        return true;\r\n      }\r\n\r\n      return platform() === 'darwin'\r\n        ? true\r\n        : false;\r\n    }\r\n\r\n    settings() {\r\n      // const errorMatch = [\r\n      //   '(?<file>(?:[^ !$`&*()+]|(?:\\\\[ !$`&*()+]))+):(\\d+):(?<line>\\\\d+):(?<col>\\\\d+)'\r\n      // ];\r\n\r\n      return [\r\n        {\r\n          name: 'AppleScript: Run Script',\r\n          exec: 'osascript',\r\n          args: [ '{FILE_ACTIVE}' ],\r\n          cwd: '{FILE_ACTIVE_PATH}',\r\n          sh: false,\r\n          atomCommandName: 'AppleScript:run-script'\r\n        },\r\n        {\r\n          name: 'AppleScript: Compile Script',\r\n          exec: 'osacompile',\r\n          args: [ '-o', '{FILE_ACTIVE_NAME_BASE}.scpt', '{FILE_ACTIVE}' ],\r\n          cwd: '{FILE_ACTIVE_PATH}',\r\n          sh: false,\r\n          atomCommandName: 'AppleScript:compile-script'\r\n        },\r\n        {\r\n          name: 'AppleScript: Compile Script bundle',\r\n          exec: 'osacompile',\r\n          args: [ '-o', '{FILE_ACTIVE_NAME_BASE}.scptd', '{FILE_ACTIVE}' ],\r\n          cwd: '{FILE_ACTIVE_PATH}',\r\n          sh: false,\r\n          atomCommandName: 'AppleScript:compile-script-bundle'\r\n        },\r\n        {\r\n          name: 'AppleScript: Compile Application',\r\n          exec: 'osacompile',\r\n          args: [ '-o', '{FILE_ACTIVE_NAME_BASE}.app', '{FILE_ACTIVE}' ],\r\n          cwd: '{FILE_ACTIVE_PATH}',\r\n          sh: false,\r\n          atomCommandName: 'AppleScript:compile-application'\r\n        },\r\n        {\r\n          name: 'JXA: Run Script',\r\n          exec: 'osascript',\r\n          args: [ '-l', 'JavaScript', '{FILE_ACTIVE}' ],\r\n          cwd: '{FILE_ACTIVE_PATH}',\r\n          sh: false,\r\n          atomCommandName: 'JXA:run-script'\r\n        },\r\n        {\r\n          name: 'JXA: Compile Script',\r\n          exec: 'osacompile',\r\n          args: [ '-l', 'JavaScript', '-o', '{FILE_ACTIVE_NAME_BASE}.scpt', '{FILE_ACTIVE}' ],\r\n          cwd: '{FILE_ACTIVE_PATH}',\r\n          sh: false,\r\n          atomCommandName: 'JXA:compile-script'\r\n        },\r\n        {\r\n          name: 'JXA: Compile Script bundle',\r\n          exec: 'osacompile',\r\n          args: [ '-l', 'JavaScript', '-o', '{FILE_ACTIVE_NAME_BASE}.scptd', '{FILE_ACTIVE}' ],\r\n          cwd: '{FILE_ACTIVE_PATH}',\r\n          sh: false,\r\n          atomCommandName: 'JXA:compile-script-bundle'\r\n        },\r\n        {\r\n          name: 'JXA: Compile Application',\r\n          exec: 'osacompile',\r\n          args: [ '-l', 'JavaScript', '-o', '{FILE_ACTIVE_NAME_BASE}.app', '{FILE_ACTIVE}' ],\r\n          cwd: '{FILE_ACTIVE_PATH}',\r\n          sh: false,\r\n          atomCommandName: 'JXA:compile-application'\r\n        }\r\n      ];\r\n    }\r\n  };\r\n}\r\n\r\n// This package depends on build, make sure it's installed\r\nexport function activate() {\r\n  if (getConfig('manageDependencies') === true) {\r\n    this.satisfyDependencies();\r\n  }\r\n}\r\n"],"names":["getConfig","key","atom","config","get","meta","satisfyDependencies","manageDependencies","title","description","type","default","order","alwaysEligible","constructor","cwd","getNiceName","isEligible","platform","settings","name","exec","args","sh","atomCommandName"],"mappings":"sGAmBO,SAASA,EAAUC,UACjBC,KAAKC,OAAOC,IAAK,GAAEC,KAAaJ,sBCiFlC,YACmC,IAApCD,EAAU,4BACPM,sCDrGmB,CAC1BC,mBAAoB,CAClBC,MAAO,sBACPC,YAAa,yEACbC,KAAM,UACNC,SAAS,EACTC,MAAO,GAETC,eAAgB,CACdL,MAAO,kBACPC,YAAa,+EACbC,KAAM,UACNC,SAAS,EACTC,MAAO,2BCVJ,kBACE,MACLE,YAAYC,QACLA,IAAMA,EAGbC,oBACS,cAGTC,oBACsC,IAAhCjB,EAAU,mBAIQ,WAAfkB,aAKTC,iBAKS,CACL,CACEC,KAAM,0BACNC,KAAM,YACNC,KAAM,CAAE,iBACRP,IAAK,qBACLQ,IAAI,EACJC,gBAAiB,0BAEnB,CACEJ,KAAM,8BACNC,KAAM,aACNC,KAAM,CAAE,KAAM,+BAAgC,iBAC9CP,IAAK,qBACLQ,IAAI,EACJC,gBAAiB,8BAEnB,CACEJ,KAAM,qCACNC,KAAM,aACNC,KAAM,CAAE,KAAM,gCAAiC,iBAC/CP,IAAK,qBACLQ,IAAI,EACJC,gBAAiB,qCAEnB,CACEJ,KAAM,mCACNC,KAAM,aACNC,KAAM,CAAE,KAAM,8BAA+B,iBAC7CP,IAAK,qBACLQ,IAAI,EACJC,gBAAiB,mCAEnB,CACEJ,KAAM,kBACNC,KAAM,YACNC,KAAM,CAAE,KAAM,aAAc,iBAC5BP,IAAK,qBACLQ,IAAI,EACJC,gBAAiB,kBAEnB,CACEJ,KAAM,sBACNC,KAAM,aACNC,KAAM,CAAE,KAAM,aAAc,KAAM,+BAAgC,iBAClEP,IAAK,qBACLQ,IAAI,EACJC,gBAAiB,sBAEnB,CACEJ,KAAM,6BACNC,KAAM,aACNC,KAAM,CAAE,KAAM,aAAc,KAAM,gCAAiC,iBACnEP,IAAK,qBACLQ,IAAI,EACJC,gBAAiB,6BAEnB,CACEJ,KAAM,2BACNC,KAAM,aACNC,KAAM,CAAE,KAAM,aAAc,KAAM,8BAA+B,iBACjEP,IAAK,qBACLQ,IAAI,EACJC,gBAAiB"}